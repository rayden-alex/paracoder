plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.freefair.lombok' version '9.0.0'
    id 'me.qoomon.git-versioning' version '6.4.4'

    // Generating a git.properties file containing information about the state of your git source code repository when the project was built
    // https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.build.generate-git-info
    // https://github.com/n0mer/gradle-git-properties
    id 'com.gorylenko.gradle-git-properties' version '2.5.3'

    // https://github.com/ben-manes/gradle-versions-plugin
    // Provides tasks for discovering dependency updates.
    id 'com.github.ben-manes.versions' version '0.53.0'
}

apply plugin: 'io.spring.dependency-management'

group = 'by.rayden'
version = '0.0.0'
gitVersioning.apply {
// https://github.com/qoomon/gradle-git-versioning-plugin
    describeTagPattern = 'v.+'
    refs {
        considerTagsOnBranches = true
        branch('master') {
            version = '${describe.tag.version}-${commit.short}'
            properties_["appExtProperty"] = '${commit.timestamp.year}-${commit.timestamp.month}-${commit.timestamp.day} ${commit.timestamp.hour}:${commit.timestamp.minute}:${commit.timestamp.second}'
        }

        branch('(?<branch>.+)') {
            version = '${describe.tag.version}-${ref.branch.slug}-${commit.short}'
            properties_["appExtProperty"] = '${commit.timestamp.year}-${commit.timestamp.month}-${commit.timestamp.day} ${commit.timestamp.hour}:${commit.timestamp.minute}:${commit.timestamp.second}'
        }
    }

    rev {
        version = "\${commit.short}"
    }
}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps

    // fine-grained control of the content of git.properties
    keys = [
            'git.branch',
            'git.build.version',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.id.describe',
            'git.commit.time',
            'git.dirty',
            'git.tags',
            'git.total.commit.count'
    ]
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)


bootJar {
    // Locking the file name to avoid changing it every time in cmd-scripts
    archiveFileName = 'ParaCoder.jar'

    // a script variable to capture the result of using project.ext to calculate the actual parameter
    // https://docs.gradle.org/8.12.1/userguide/configuration_cache.html#config_cache:requirements:use_project_during_execution
    def my_project_ext = project.ext

    manifest {
        // Filling the manifest attribute using the git property.
        attributes 'Build-Revision': "${-> my_project_ext.gitProps['git.commit.id.abbrev']}" // Use GString lazy evaluation to delay until git properties are populated
        attributes 'Enable-Native-Access': 'ALL-UNNAMED'
    }
}

springBoot {
    // https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.build.generate-info
    // https://docs.spring.io/spring-boot/docs/3.2.3/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
    // This will configure a BuildInfo task named bootBuildInfo.
    // A BuildInfo task is provided to generate " "build/resources/main/META-INF/build-info.properties"
    buildInfo()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(25)
    }
}

repositories {
    mavenCentral()
}

configurations {
    mockitoAgent
}

configurations.configureEach {
//	https://gradlehero.com/how-to-exclude-gradle-dependencies/
    exclude group: 'io.micrometer'
}

// Override the JUnit version.
// See https://docs.junit.org/current/user-guide/#running-tests-build-spring-boot
ext['junit-jupiter.version'] = '6.0.0'

dependencies {
    compileOnly 'org.jetbrains:annotations:26.0.2-1'

    implementation 'net.java.dev.jna:jna:5.18.1'

    implementation 'info.picocli:picocli-spring-boot-starter:4.7.7'
    implementation 'org.fusesource.jansi:jansi:2.4.2'

    implementation 'commons-io:commons-io:2.20.0'
    implementation 'org.digitalmediaserver:cuelib-core:2.0.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    mockitoAgent('org.mockito:mockito-core:5.20.0') {
        transitive = false
    }
}

lombok {
    version = '1.18.42'
}


// See https://docs.spring.io/spring-boot/gradle-plugin/reacting.html  point 11.
// Spring Boot plugin already Configures any JavaCompile tasks with no configured encoding to use UTF-8.
//tasks.withType(JavaCompile).configureEach {
//    // https://gist.github.com/rponte/d660919434d094bbd35a1aabf7ef1bf0
//    // https://docs.spring.io/spring-boot/docs/3.2.2/gradle-plugin/reference/htmlsingle/#reacting-to-other-plugins.java
//    options.encoding = "UTF-8"
//}

tasks.withType(Test).configureEach {
    defaultCharacterEncoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
}

tasks.register('versionDebug') {
    def my_project = project
    doLast {
        println(my_project.version)
        println(my_project.property("appExtProperty"))
        println(my_project.property("git.commit"))
        println(my_project.property("git.commit.timestamp.datetime"))
        println(my_project.property("git.ref"))
    }
}

test {
    useJUnitPlatform()

    // to suppress WARNING like this:
    // "A Java agent has been loaded dynamically...  byte-buddy-agent...",
    // "OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes
    // because bootstrap classpath has been appended"
    jvmArgs += '--enable-native-access=ALL-UNNAMED'
    jvmArgs += '-Xshare:off'
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"

    // To show passed test in console output
//    testLogging {
//        events "passed", "skipped", "failed" // , "standardOut", "standardError"
//    }
}
