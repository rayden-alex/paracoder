plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'me.qoomon.git-versioning' version '6.4.3'

    // Generating a git.properties file containing information about the state of your git source code repository when the project was built
    // https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.build.generate-git-info
    // https://github.com/n0mer/gradle-git-properties
    id 'com.gorylenko.gradle-git-properties' version '2.4.1'

    id 'org.graalvm.buildtools.native' version '0.10.1'
}

group = 'by.rayden'
version = '0.0.0'
gitVersioning.apply {
// https://github.com/qoomon/gradle-git-versioning-plugin
    describeTagPattern = 'v.+'
    refs {
        considerTagsOnBranches = true
        branch('master') {
            version = '${describe.tag.version}-${commit.short}'
            properties_["appExtProperty"] = '${commit.timestamp.year}-${commit.timestamp.month}-${commit.timestamp.day} ${commit.timestamp.hour}:${commit.timestamp.minute}:${commit.timestamp.second}'
        }

        branch('(?<branch>.+)') {
            version = '${describe.tag.version}-${ref.branch.slug}-${commit.short}'
            properties_["appExtProperty"] = '${commit.timestamp.year}-${commit.timestamp.month}-${commit.timestamp.day} ${commit.timestamp.hour}:${commit.timestamp.minute}:${commit.timestamp.second}'
        }
    }

    rev {
        version = "\${commit.short}"
    }
//    updateGradleProperties = true
}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps

    // fine-grained control of the content of git.properties
    keys = [
            'git.branch',
            'git.build.version',
            'git.closest.tag.commit.count',
            'git.closest.tag.name',
            'git.commit.id',
            'git.commit.id.abbrev',
            'git.commit.id.describe',
            'git.commit.time',
            'git.dirty',
            'git.tags',
            'git.total.commit.count'
    ]
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)


bootJar {
    // Locking the file name to avoid changing it every time in cmd-scripts
    archiveFileName = 'ParaCoder.jar'

    manifest {
        // Filling the manifest attribute using the git property.
        attributes('Build-Revision': "${-> project.ext.gitProps['git.commit.id.abbrev']}"  // Use GString lazy evaluation to delay until git properties are populated
        )
    }
}

springBoot {
    // https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto.build.generate-info
    // https://docs.spring.io/spring-boot/docs/3.2.3/gradle-plugin/reference/htmlsingle/#integrating-with-actuator.build-info
    // This will configure a BuildInfo task named bootBuildInfo.
    // A BuildInfo task is provided to generate " "build/resources/main/META-INF/build-info.properties"
    buildInfo()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    byteBuddyAgent
    generateConfig
}

configurations.configureEach {
//	https://gradlehero.com/how-to-exclude-gradle-dependencies/
    exclude group: 'io.micrometer'
}

repositories {
    mavenCentral()
}

dependencies {
    // Next dependency is to get rid of "unknown enum constant javax.annotation.meta.When.MAYBE" warning
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.0'
    compileOnly 'org.jetbrains:annotations:24.0.1'

    implementation 'net.java.dev.jna:jna:5.13.0'

    implementation 'info.picocli:picocli-spring-boot-starter:4.7.5'
    implementation 'info.picocli:picocli-jansi-graalvm:1.2.0'
    implementation 'commons-io:commons-io:2.11.0'
    compileOnly 'org.projectlombok:lombok'
    generateConfig 'info.picocli:picocli-codegen:4.7.5'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    byteBuddyAgent 'net.bytebuddy:byte-buddy-agent'
}

tasks.withType(JavaCompile).configureEach {
    // Specifies options to pass to picocli annotation processor (-Akey[=value]).
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]

    //Enable JDK21 preview features, see https://docs.gradle.org/current/userguide/building_java_projects.html#sec:feature_preview
    options.compilerArgs += "--enable-preview"
//    options.compilerArgs += "-Xlint:preview"

    // https://gist.github.com/rponte/d660919434d094bbd35a1aabf7ef1bf0
    // Although Spring Boot Gradle Plugin configures any JavaCompile tasks with no configured encoding to use UTF-8.
    // https://docs.spring.io/spring-boot/docs/3.2.2/gradle-plugin/reference/htmlsingle/#reacting-to-other-plugins.java
    options.encoding = "UTF-8"
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"

    // To get rid of "WARNING: A Java agent has been loaded dynamically ... byte-buddy-agent..."
    // https://github.com/raphw/byte-buddy/discussions/1535
    jvmArgs += "-javaagent:${configurations.byteBuddyAgent.singleFile}"
    defaultCharacterEncoding = "UTF-8"
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "--enable-preview"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
}

tasks.register('versionDebug') {
    doLast {
        println(project.version)
        println(project.property("appExtProperty"))
        println(project.property("git.commit"))
        println(project.property("git.commit.timestamp.datetime"))
        println(project.property("git.ref"))
    }
}

test {
    useJUnitPlatform()
}

graalvmNative {
    agent {
        defaultMode = "standard" // Default agent mode if one isn't specified using `-Pagent=mode_name`
        enabled = true // Enables the agent

        // Copies metadata collected from tasks into the specified directories.
        metadataCopy {
            inputTaskNames.add("bootRun") // Tasks previously executed with the agent attached.
//            inputTaskNames.add("collectReachabilityMetadata") // Tasks previously executed with the agent attached.
            outputDirectories.add("src/main/resources/META-INF/native-image") // Copies the metadata collected by the agent into the project sources
            mergeWithExisting = true // Instead of copying, merge with existing metadata in the output directories.
        }
    }

    binaries {
        main {
            // Main options
            debug = false // Determines if debug info should be generated, defaults to false (alternatively add --debug-native to the CLI)
            verbose = false // Add verbose output, defaults to false

            // Advanced options
            buildArgs.add('--enable-preview') // Passes '--enable-preview' to the native image builder options. This can be used to pass parameters which are not directly supported by this extension
            buildArgs.add('-Dsun.native.encoding=UTF-8')

            jvmArgs.add('--enable-preview') // Passes '--enable-preview' directly to the JVM running the native image builder
            jvmArgs.add('-Dfile.encoding=UTF-8')
            jvmArgs.add('-Dsun.native.encoding=UTF-8')
            jvmArgs.add('-Dsun.stdout.encoding=UTF-8')
            jvmArgs.add('-Dsun.stderr.encoding=UTF-8')

        }
    }
}

tasks.register('generateGraalReflectionConfig', JavaExec) {
    enabled = false
    dependsOn 'classes'
    mainClass = 'picocli.codegen.aot.graalvm.ReflectionConfigGenerator'
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    def outputFile = "${buildDir}/resources/main/META-INF/native-image/${project.group}/${project.name}/reflect-config.json"
    args = ["--output=$outputFile", 'by.rayden.paracoder.cli.command.CommandController']
}
assemble.dependsOn generateGraalReflectionConfig

tasks.register('generateGraalDynamicProxyConfig', JavaExec) {
    enabled = false
    dependsOn 'classes'
    mainClass = 'picocli.codegen.aot.graalvm.DynamicProxyConfigGenerator'
    classpath = configurations.generateConfig + sourceSets.main.runtimeClasspath
    def outputFile = "${buildDir}/resources/main/META-INF/native-image/${project.group}/${project.name}/proxy-config.json"
    args = ["--output=$outputFile", 'by.rayden.paracoder.cli.command.CommandController']
}
assemble.dependsOn generateGraalDynamicProxyConfig
